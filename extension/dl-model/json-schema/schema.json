{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "DL Model Item",
	"description": "This object represents the metadata for a DL model item in a DL Catalog.",
	"allOf": [
		{
		  "$ref": "https://schemas.stacspec.org/v1.0.0-beta.2/item-spec/json-schema/item.json"
		},
		{
		  "$ref": "#/definitions/dl-model"
		},
		{
		  "$ref": "https://schemas.stacspec.org/v1.0.0-beta.2/item-spec/json-schema/instrument.json"
		},
		{
		  "$ref": "https://schemas.stacspec.org/v1.0.0-beta.2/item-spec/json-schema/licensing.json"
		},
		{
		  "$ref": "https://schemas.stacspec.org/v1.0.0-beta.2/item-spec/json-schema/provider.json"
		},
		{
		  "$ref": "https://schemas.stacspec.org/v1.0.0-beta.2/item-spec/json-schema/datetime.json"
		}
	],
	"definitions": {
		"dl-model": {
			"type": "object",
			"required": [
				"stac_extensions",
				"properties"
			],
			"properties": {
				"stac_extensions": {
					"type": "array",
					"contains": {
						"enum": [
							"dl-model",
							"https://example.com/dl-model/1.0/schema.json"
						]
					}
				},
				"properties": {
					"type": "object",
					"required": [
						"dlm:engine",
						"dlm:inputs",
						"dlm:outputs",
						"dlm:archive",
						"dlm:data"
					],
					"properties": {
						"dlm:engine": {
							"title": "Execution environement",
							"description": "Describe the execution environement",
							"type": "object",
							"required": [
								"framework",
								"version",
								"docker"
							],
							"properties": {
								"framework": {
									"title": "Name of the deep learning used",
									"type": "string"
								},
								"version": {
									"title": "Version du framework",
									"type": "string"
								},
								"model_handler": {
									"title": "Model handling function",
									"type": "string"
								},
								"model_src_url": {
									"title": "Model source repository",
									"type": "string"
								},
								"model_src_hash": {
									"title": "Hash value for the Model source",
									"type": "string"
								},
								"docker": {
									"title": "Docker container specifications",
									"type": "object",
									"properties": {
										"docker_file": {
											"title": "Docker file url",
											"type": "string"
										},
										"gpu": {
											"title": "Docker image requires a gpu",
											"type": "boolean"
										},

										"image_name": {
											"title": "Docker image name",
											"type": "string"
										},
										"tag": {
											"title": "Docker image tag",
											"type": "string"
										},
										"working_dir": {
											"title": "Docker container working dir",
											"type": "string"
										},
										"run": {
											"title": "Docker run parameters",
											"type": "string"
										}
									}
								}
							}	
						},
						"dlm:architecture": {
							"title": "Model architecture description",
							"description": "Describe the model architecture",
							"type": "object",
							"required": [
								"nb_parameters",
								"type",
								"pretrained"
							],
							"properties": {
								"nb_parameters": {
									"title": "Total number of parameters",
									"type": "integer"
								},
								"type": {
									"title": "Type of architecture",
									"type": "string"
								},
								"summary": {
									"title": "Summary of the architecture",
									"type": "string"
								},
								"pretrained": {
									"title": "Pre-training",
									"type": "string"
								}
							}	
						},
						"dlm:inputs": {
							"title": "Description of the input tensor",
							"type": "object",
							"description": "Describe the inputs required by the model",
							"required": [
								"name",
								"scaling_factor",
								"normalization:mean",
								"normalization:std",
								"shape"
							],
							"properties": {
								"name": {
									"title": "Python name of the tensor",
									"type": "string"
								},
								"scaling_factor": {
									"title": "Scaling factor",
									"type": "number",
									"exclusiveMinimum": 0
								},
								"normalization:mean": {
									"title": "Statistical mean",
									"type": "array",
      								"minItems": 1,
      								"items": {
        								"type": "number"
      								}
								},
								"normalization:std": {
									"title": "Statistical standard-deviation",
									"type": "array",
      								"minItems": 1,
      								"items": {
										"type": "number",
										"exclusiveMinimum": 0
      								}
								},
								"shape": {
									"title": "Shape of the input tensor",
									"type": "object",
									"description": "Describe the dimensions of the input tensor",
									"required": [
										"batch",
										"dim",
										"height",
										"width"
									],
									"properties": {
										"batch": {
											"title": "Batch size",
											"type": "integer",
											"minimum": 1
										},
										"dim": {
											"title": "Number of channels",
											"type": "integer",
											"minimum": 1
										},
										"height": {
											"title": "Height",
											"type": "integer",
											"minimum": 1
										},
										"width": {
											"title": "Width",
											"type": "integer",
											"minimum": 1
										}
									}
								},
								"test_file": {
									"title": "Test file",
									"type": "object",
									"description": "this test file is a saved tensor",
									"required": [
										"batch",
										"dim",
										"height",
										"width"
									],
									"properties": {
										"filename": {
											"title": "Batch size",
											"type": "integer",
											"minimum": 1
										},
										"output": {
											"title": "Number of channels",
											"type": "integer",
											"minimum": 1
										},
										"selected_bands": {
											"title": "Selected bands",
											"type": "array",
											"minItems": 1,
											"items": {
												"type": "integer"
											}
										}
									}
								}
							}	
						},
						"dlm:outputs": {
							"title": "Description of the outputs of the model",
							"type": "object",
							"description": "Describe the outputs of the model",
							"required": [
								"task",
								"number_of_classes",
								"final_layer_size",
								"class_name_mapping"
							],
							"properties": {
								"task": {
									"title": "Task name",
									"type": "string",
									"enum": [
										"semantic segmentation",
										"classification",
										"object detection",
										"object segmentation"
									  ]
								},
								"number_of_classes": {
									"title": "number of classes",
									"type": "integer",
									"minimum": 1
								},
								"final_layer_size": {
									"title": "Output size",
									"description": "Size of the tensor from the top layer",
									"type": "array",
      								"minItems": 1,
      								"items": {
										"type": "integer",
										"exclusiveMinimum": 0
      								}
								},
								"dont_care_index": {
									"title": "dont care index",
									"description": "In case a dont care class is used",
									"type": "integer"
								},
								"post_processing_function": {
									"title": "Name of the post processing file",
									"description": "Name of the python file containing a post-processing function",
									"type": "string"
								},
								"class_name_mapping": {
									"title": "Output size",
									"description": "This is a lookup table mapping the model output (index) to a class name",
									"type": "array",
									"minItems": 1,
									"items": {
										"properties": {
											"index": {
												"title": "Class index",
												"type": "integer",
												"minimum": 0
											},
											"class_name": {
												"title": "Class name",
												"type": "string"
											}
										}
									}
								}
								
							}
						},
						"dlm:data": {
							"title": "Description of the data requirements",
							"type": "object",
							"description": "Describe the data compatible with the model",
							"required": [
								"process_level",
								"dtype",
								"number_of_bands",
								"class_name_mapping"
							],
							"properties": {
								"process_ level": {
									"title": "Data processing level",
									"description": "Describe the data compatible with the model",
									"type": "string",
									"enum": [
										"raw",
										"ortho",
										"L0",
										"L1",
										"L2",
										"L3"
									]
								},
								"nodata_value": {
									"title": "no data value",
									"description": "Sometimes datasets have no data value, this value should be ignored",
									"type": "number"
								},
								"number_of_bands": {
									"title": "number of bands",
									"description": "Number of spectral bands expected by the model",
									"type": "number",
									"minimum": 1
								},
								"useful_bands": {
									"title": "Useful bands",
									"description": "Describe the spectral bands required by the model",
									"type": "array",
									"minItems": 1,
									"items": {
										"properties": {
											"index": {
												"title": "Index of the spectral band",
												"description": "Index of the band in the original dataset",
												"type": "integer",
												"minimum": 0
											},
											"name": {
												"title": "Short name of the band",
												"type": "string"
											}
										}
									}
								},
								"dtype": {
									"title": "Data type",
									"description": "Data type according to numpy",
									"type": "string",
									"enum": [
										"byte",
										"short",
										"intc",
										"int_",
										"longlong",
										"int8",
										"int16",
										"int32",
										"int64",
										"ubyte",
										"ushort",
										"uintc",
										"uint",
										"ulonglong",
										"uint8",
										"uint16",
										"uint32",
										"uint64",
										"half",
										"double",
										"float_",
										"longfloat",
										"float16",
										"float32",
										"float64",
										"float96",
										"float128"
									]
								}
							}
						},
						"dlm:archive": {
							"title": "Description of the archive content",
							"description": "Describe the model archive content",
							"type": "array",
							"minItems": 1,
							"items": {
								"properties": {
									"name": {
										"title": "File name",
										"type": "string"
									},
									"role": {
										"title": "Role of the file",
										"type": "string",
										"enum": [
											"dependency",
											"handling function",
											"model weight",
											"config file",
											"test set",
											"other"
										]
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

	
